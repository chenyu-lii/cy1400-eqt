import pandas as pd
import numpy as np
from pathlib import Path
import matplotlib.pyplot as plt
import argparse
from operator import le, ge

# agreement = 50
# agreement = 50 + snr
# 
# snr filter


# first load the csv file

# then want to plot precision

def lcurve_plotter(df, key, f): 
	# thresholds along one dimension
	# f: greater than or less than, but it should be greater than (ge) all the time tbh

	# 100 bins by default


	thresholds = np.linspace(0, df[key].max(), 20, endpoint = False) # 100 bins

	good = []
	precision = []

	for _threshold in thresholds:
		_A, _B, _Z = ABZ(df[f(df[key], _threshold)])

		good.append((_A + _B))
		precision.append(prec(_A,_B,_Z))

	return (thresholds, good, precision)

def prec(A,B,Z):
	try:
		return ((A+B)/(A+B+Z))
	except:
		return 0

def ABZ(df):
	A = len(df[df.grade == "A"].index)
	B = len(df[df.grade == "B"].index)
	Z = len(df[df.grade == "Z"].index)

	return (A,B,Z)

def what(df):
	A = len(df[df.grade == "A"].index)
	B = len(df[df.grade == "B"].index)
	Z = len(df[df.grade == "Z"].index)

	return prec(A,B,Z), (A+B)


def main(input_csv, output_file):

	df = pd.read_csv(input_csv)
	#output_file = "plot_data/21may_snr_lcurves.csv"

	df["log10_new_p_snr"] = 10 * np.log10(df['new_p_snr_percentileratio'])
	df["log10_new_s_snr"] = 10 * np.log10(df['new_s_snr_percentileratio'])

	df["new_p_snr_ampsq"] = 10 * np.log10(df["new_p_snr_ampsq"])
	df["new_s_snr_ampsq"] = 10 * np.log10(df["new_s_snr_ampsq"])


	# print(what(df[(df.log10_new_p_snr > 5.5)]))
	print(what(df[(df.log10_new_s_snr > 8) & (df.agreement == 50)]))
	# print(what(df[(df.log10_new_p_snr > 5.5) & (df.log10_new_s_snr > 8)]))
	# print(what(df[df.agreement == 50]))
	# print(what(df[(df.agreement == 50) & (df.log10_new_p_snr > 5.5)]))
	# print(what(df[(df.agreement == 50) & (df.log10_new_s_snr > 8)]))
	# print(what(df[(df.agreement == 50) & (df.log10_new_p_snr > 5.5) & (df.log10_new_s_snr > 8)]))

	plot_df = pd.DataFrame()

	# plot_df['new_p_snr_ampsq_bins'], plot_df['new_p_snr_ampsq_gd'], plot_df['new_p_snr_ampsq_pr'] = lcurve_plotter(df, 'new_p_snr_ampsq', ge)

	# plot_df['new_s_snr_ampsq_bins'], plot_df['new_s_snr_ampsq_gd'], plot_df['new_s_snr_ampsq_pr'] = lcurve_plotter(df, 'new_s_snr_ampsq', ge)

	# #plot_df['new_s_snr_bins'], plot_df['new_s_snr_gd'], plot_df['new_s_snr_pr'] = lcurve_plotter(df, 'log10_new_s_snr', ge)

	# plot_df['new_p_snr_bins_agreement50'], plot_df['new_p_snr_gd_agreement50'], plot_df['new_p_snr_pr_agreement50'] = lcurve_plotter(df[df.agreement == 50], 'new_p_snr_ampsq', ge)
	# plot_df['new_s_snr_bins_agreement50'], plot_df['new_s_snr_gd_agreement50'], plot_df['new_s_snr_pr_agreement50'] = lcurve_plotter(df[df.agreement == 50], 'new_s_snr_ampsq', ge)

	plot_df['new_p_snr_ampsq_bins'], plot_df['new_p_snr_ampsq_gd'], plot_df['new_p_snr_ampsq_pr'] = lcurve_plotter(df, 'log10_new_p_snr', ge)

	plot_df['new_s_snr_ampsq_bins'], plot_df['new_s_snr_ampsq_gd'], plot_df['new_s_snr_ampsq_pr'] = lcurve_plotter(df, 'log10_new_s_snr', ge)

	#plot_df['new_s_snr_bins'], plot_df['new_s_snr_gd'], plot_df['new_s_snr_pr'] = lcurve_plotter(df, 'log10_new_s_snr', ge)

	plot_df['new_p_snr_bins_agreement50'], plot_df['new_p_snr_gd_agreement50'], plot_df['new_p_snr_pr_agreement50'] = lcurve_plotter(df[df.agreement == 50], 'log10_new_p_snr', ge)
	plot_df['new_s_snr_bins_agreement50'], plot_df['new_s_snr_gd_agreement50'], plot_df['new_s_snr_pr_agreement50'] = lcurve_plotter(df[df.agreement == 50], 'log10_new_s_snr', ge)


	#print(plot_df)

	#plot_df.to_csv(output_file, index = False)


	# l curve for:
	# 10 log10 psnr, 
	# 10log10 snr
	# agreement 50 + 10log10 psnr,
	# agreement 50 + 10 log10 ssnr
	# 
	
if __name__ == "__main__":

	parser = argparse.ArgumentParser()

	#parser.add_argument('source_folder', help = "sac_picks folder, from the eqt plotter")
	#parser.add_argument('csv_file', help = "csv file generated by eqt")
	parser.add_argument('input_csv', help = "csv file with recomputed snr")
	parser.add_argument('output_csv', help = "plot file for 4 different l_curves")
	
	args = parser.parse_args()
	
	main(args.input_csv, args.output_csv)

